# Data generated with 'makedefs'
bpath:libnethack/dat/data: bpath:libnethack/util/makedefs path:libnethack/dat/data.base > libnethack/util/makedefs -d $SOURCEPATH(libnethack/dat/data.base) libnethack/dat/data
bpath:libnethack/dat/dungeon.pdf: bpath:libnethack/util/makedefs path:libnethack/dat/dungeon.def > libnethack/util/makedefs -e $SOURCEPATH(libnethack/dat/dungeon.def) libnethack/dat/dungeon.pdf
bpath:libnethack/dat/quest.dat: bpath:libnethack/util/makedefs path:libnethack/dat/quest.txt > libnethack/util/makedefs -q $SOURCEPATH(libnethack/dat/quest.txt) libnethack/dat/quest.dat
bpath:libnethack/dat/rumors: bpath:libnethack/util/makedefs path:libnethack/dat/data.base > libnethack/util/makedefs -r $SOURCEPATH(libnethack/dat/rumors.tru) $SOURCEPATH(libnethack/dat/rumors.tru) libnethack/dat/rumors
bpath:libnethack/dat/oracles: bpath:libnethack/util/makedefs path:libnethack/dat/oracles.txt > libnethack/util/makedefs -d $SOURCEPATH(libnethack/dat/oracles.txt) libnethack/dat/oracles
# Data generated with dungeon compiler
bpath:libnethack/dat/dungeon: bpath:libnethack/util/dgn_main bpath:libnethack/dat/dungeon.pdf > libnethack/util/dgn_main libnethack/dat/dungeon.pdf
# Data generated with level compiler is done in aimake.config, as it's a complex rule
# nhdat has to be rebuild_late no matter what, so...
bpath:libnethack/dat/nhdat: sys:rebuild_late bpath:libnethack/util/dlb_main > (cd libnethack/dat; ../util/dlb_main cf nhdat *.lev data dungeon oracles quest.dat rumors)

# Install rules
install_target:datadir/bpath:libnethack/dat/nhdat
install_target:datadir/path:libnethack/dat/license
# TODO: When aimake supports it, we want sys:empty_file here instead
install_target:statedir/path:/dev/null>logfile
install_target:statedir/path:/dev/null>record
install_target:specificlockdir/path:/dev/null>sys:touch_only

