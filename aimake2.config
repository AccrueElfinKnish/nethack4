# NetHack 4: aimake configuration.
{
    options => {
        packagename => 'nethack4',
        WIZARD => 'wizard', # change to change who can use wizard mode
    },
    rules => {
        _iflags => {
            object => 'optionset:IFLAGS',
            depends => 'optstring:-DNETCLIENT',
            verb => 'determined',
        },
        _cflags => {
            object => 'optionset:CFLAGS',
            depends => [
                'optstring:-Wall',
                'optstring:-Wextra',
                'optstring:-Wno-missing-field-initializers',
                # These warnings are probably worth fixing eventually,
                # but have too many false positives to be able to show
                # them right now
                'optstring:-Wno-unused-parameter',
                'optstring:-Wno-unused-result',
                'optstring:-Wno-sign-compare',
                'optstring:-Wold-style-definition',
                'optstring:-Wstrict-prototypes',
                'optstring:-Wmissing-prototypes',
                'optstring:-Wmissing-declarations',
                'optstring:-Wpointer-arith',
            ],
            verb => 'determined',
        },
        _libraries => {
            object => 'optionset:libraries',
            depends => ['optstring:-ljansson',
                        'optstring:-lpq'],
            verb => 'determined',
        },
        _build_desfile => {
            object => qr/^path:.*\.des$/s,
            command => ["bpath:libnethack/util/lev_main$exeext",
                        # We can't portably produce a "filename with a
                        # trailing slash". So we give a single space
                        # as the file part of the name, and get
                        # lev_main to replace it with the filename.
                        'optpath:-o :bpath:libnethack/dat/ ',
                        'optpath::'],
            output => qr/^Wrote '(.*)'.$/,
        },
        _makedefs_date => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-v :bpath:libnethack/include/date.h",
                        "sys:always_rebuild"],
            output => 'bpath:libnethack/include/date.h',
        },
        _makedefs_verinfo => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-w :bpath:libnethack/include/verinfo.h"],
            output => 'bpath:libnethack/include/verinfo.h',
        },
        _makedefs_onames => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-o :bpath:libnethack/include/onames.h"],
            output => 'bpath:libnethack/include/onames.h',
        },
        _makedefs_pm => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-p :bpath:libnethack/include/pm.h"],
            output => 'bpath:libnethack/include/pm.h',
        },
        _makedefs_monstr => {
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-m :bpath:libnethack/src/monstr.c"],
            output => 'bpath:libnethack/src/monstr.c',
        },
        _makedefs_data => {
            object => "path:libnethack/dat/data.base",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-d :",
                        "optpath::bpath:libnethack/dat/data"],
            output => 'bpath:libnethack/dat/data',
        },
        _makedefs_dungeon => {
            object => "path:libnethack/dat/dungeon.def",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-e :",
                        "optpath::bpath:libnethack/dat/dungeon.pdf"],
            output => 'bpath:libnethack/dat/dungeon.pdf',
        },
        _makedefs_quest => {
            object => "path:libnethack/dat/quest.txt",
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optpath:-q :",
                        "optpath::bpath:libnethack/dat/quest.dat"],
            output => 'bpath:libnethack/dat/quest.dat',
        },
        _makedefs_rumors => {
            # We rely on the fact that optpath: options given
            # explicitly always stay in the same order.
            command => ["bpath:libnethack/util/makedefs$exeext",
                        "optstring:-r",
                        "optpath::path:libnethack/dat/rumors.tru",
                        "optpath::path:libnethack/dat/rumors.fal",
                        "optpath::bpath:libnethack/dat/rumors"],
            output => 'bpath:libnethack/dat/rumors',
        },
        _compile_dungeon => {
            object => "bpath:libnethack/dat/dungeon.pdf",
            command => ["bpath:libnethack/util/dgn_main$exeext",
                        "optpath::"],
            output => 'bpath:libnethack/dat/dungeon',
        },
        # TODO: nhdat
    },
}
